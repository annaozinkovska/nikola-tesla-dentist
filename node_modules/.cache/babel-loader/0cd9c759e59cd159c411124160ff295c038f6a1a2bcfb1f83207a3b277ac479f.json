{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\38093\\\\Desktop\\\\react-app1\\\\src\\\\components\\\\Contacts.js\";\nimport React from 'react';\nimport { Formik, Form, Field } from 'formik';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Contacts = () => {\n  const validateName = value => {\n    if (!value) {\n      return 'Required';\n    }\n  };\n  const validateEmail = value => {\n    if (!value) {\n      return 'Required';\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) {\n      return 'Invalid email address';\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Contacts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Please contact us\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        name: '',\n        email: ''\n      },\n      onSubmit: values => {\n        console.log(values);\n      },\n      children: _ref => {\n        let {\n          errors,\n          touched\n        } = _ref;\n        return /*#__PURE__*/_jsxDEV(Form, {\n          autoComplete: \"off\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"firstName\",\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Field, {\n            id: \"firstName\",\n            name: \"name\",\n            validate: validateName,\n            className: errors.name && touched.name ? \"invalid\" : \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 13\n          }, this), errors.name && touched.name && /*#__PURE__*/_jsxDEV(\"p\", {\n            children: errors.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 45\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"email\",\n            children: \"Email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Field, {\n            id: \"email\",\n            name: \"email\",\n            validate: validateEmail,\n            className: errors.email && touched.email ? \"invalid\" : \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 13\n          }, this), errors.email && touched.email && /*#__PURE__*/_jsxDEV(\"p\", {\n            children: errors.email\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 47\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Sign in\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 11\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n_c = Contacts;\nexport default Contacts;\nvar _c;\n$RefreshReg$(_c, \"Contacts\");","map":{"version":3,"names":["React","Formik","Form","Field","jsxDEV","_jsxDEV","Fragment","_Fragment","Contacts","validateName","value","validateEmail","test","children","fileName","_jsxFileName","lineNumber","columnNumber","initialValues","name","email","onSubmit","values","console","log","_ref","errors","touched","autoComplete","htmlFor","id","validate","className","type","_c","$RefreshReg$"],"sources":["C:/Users/38093/Desktop/react-app1/src/components/Contacts.js"],"sourcesContent":["import React from 'react'\r\nimport {Formik, Form, Field} from 'formik';\r\n\r\nconst Contacts = () => {\r\n\r\n  const validateName = (value) =>{\r\n  if(!value){\r\n    return 'Required'\r\n  }\r\n }\r\n\r\n  const validateEmail = (value) =>{\r\n  if(!value){\r\n    return 'Required'\r\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)){\r\n    return 'Invalid email address'\r\n  }\r\n }\r\n\r\n  return (\r\n    <>\r\n    <h1>Contacts</h1>\r\n    <p>Please contact us</p>\r\n    <Formik\r\n      initialValues={{\r\n        name: '',\r\n        email: '',\r\n      }}\r\n      onSubmit={values => {console.log(values)}}\r\n      >\r\n        {({errors, touched}) => (\r\n          <Form autoComplete=\"off\">\r\n            <label htmlFor=\"firstName\">Name</label>\r\n            <Field id=\"firstName\" name=\"name\" validate={validateName} className={errors.name && touched.name ? \"invalid\" : \"\"} />\r\n            {errors.name && touched.name && <p>{errors.name}</p>}\r\n            <label htmlFor=\"email\">Email</label>\r\n            <Field id=\"email\" name=\"email\" validate={validateEmail} className={errors.email && touched.email ? \"invalid\" : \"\"}  />\r\n            {errors.email && touched.email && <p>{errors.email}</p>}\r\n            <button type=\"submit\">Sign in</button>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n  </>\r\n\r\n  )\r\n}\r\n\r\nexport default Contacts"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}